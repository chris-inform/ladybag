--- modules/field/tests/src/Kernel/EntityReference/Views/SelectionTest.php
+++ modules/field/tests/src/Kernel/EntityReference/Views/SelectionTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\field\Kernel\EntityReference\Views;
 
+use Drupal\Component\Utility\Html;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\node\Entity\NodeType;
@@ -40,6 +41,13 @@ class SelectionTest extends KernelTestBase {
    */
   protected $nodes = [];
 
+  /**
+   * The selection handler.
+   *
+   * @var \Drupal\Core\Entity\EntityReferenceSelection\SelectionInterface
+   */
+  protected $selectionHandler;
+
   /**
    * {@inheritdoc}
    */
@@ -58,7 +66,7 @@ protected function setUp() {
     $node3 = $this->createNode();
 
     foreach ([$node1, $node2, $node3] as $node) {
-      $this->nodes[$node->bundle()][$node->id()] = $node->label();
+      $this->nodes[$node->id()] = $node;
     }
 
     // Create an entity reference field.
@@ -69,18 +77,16 @@ protected function setUp() {
       ],
     ];
     $this->createEntityReferenceField('entity_test', 'test_bundle', 'test_field', $this->randomString(), 'node', 'views', $handler_settings);
+    $field_config = FieldConfig::loadByName('entity_test', 'test_bundle', 'test_field');
+    $this->selectionHandler = $this->container->get('plugin.manager.entity_reference_selection')->getSelectionHandler($field_config);
   }
 
   /**
    * Tests the selection handler.
    */
   public function testSelectionHandler() {
-    $field_config = FieldConfig::loadByName('entity_test', 'test_bundle', 'test_field');
-    $selection_handler = $this->container->get('plugin.manager.entity_reference_selection')->getSelectionHandler($field_config);
-
     // Tests the selection handler.
-    $result = $selection_handler->getReferenceableEntities();
-    $this->assertResults($result);
+    $this->assertResults($this->selectionHandler->getReferenceableEntities());
 
     // Add a relationship to the view.
     $view = Views::getView('test_entity_reference');
@@ -110,8 +116,33 @@ public function testSelectionHandler() {
     $view->save();
 
     // Tests the selection handler with a relationship.
-    $result = $selection_handler->getReferenceableEntities();
-    $this->assertResults($result);
+    $this->assertResults($this->selectionHandler->getReferenceableEntities());
+  }
+
+  /**
+   * Tests the anchor tag stripping.
+   *
+   * Unstripped results based on the data above will result in output like so:
+   *   ...<a href="/node/1" hreflang="en">Test first node</a>...
+   *   ...<a href="/node/2" hreflang="en">Test second node</a>...
+   *   ...<a href="/node/3" hreflang="en">Test third node</a>...
+   * If we expect our output to not have the <a> tags, and this matches what's
+   * produced by the tag-stripping method, we'll know that it's working.
+   */
+  public function testAnchorTagStripping() {
+    $filtered_rendered_results_formatted = [];
+    foreach ($this->selectionHandler->getReferenceableEntities() as $subresults) {
+      $filtered_rendered_results_formatted += $subresults;
+    }
+
+    // Note the missing <a> tags.
+    $expected = [
+      1 => '<span class="views-field views-field-title"><span class="field-content">' . Html::escape($this->nodes[1]->label()) . '</span></span>',
+      2 => '<span class="views-field views-field-title"><span class="field-content">' . Html::escape($this->nodes[2]->label()) . '</span></span>',
+      3 => '<span class="views-field views-field-title"><span class="field-content">' . Html::escape($this->nodes[3]->label()) . '</span></span>',
+    ];
+
+    $this->assertEqual($filtered_rendered_results_formatted, $expected, 'Anchor tag stripping has failed.');
   }
 
   /**
@@ -121,16 +152,12 @@ public function testSelectionHandler() {
    *   Query results keyed by node type and nid.
    */
   protected function assertResults(array $result) {
-    $success = FALSE;
     foreach ($result as $node_type => $values) {
       foreach ($values as $nid => $label) {
-        if (!$success = $this->nodes[$node_type][$nid] == trim(strip_tags($label))) {
-          // There was some error, so break.
-          break;
-        }
+        $this->assertSame($node_type, $this->nodes[$nid]->bundle());
+        $this->assertSame(trim(strip_tags($label)), Html::escape($this->nodes[$nid]->label()));
       }
     }
-    $this->assertTrue($success, 'Views selection handler returned expected values.');
   }
 
 }
