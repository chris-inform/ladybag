--- modules/views/src/Plugin/EntityReferenceSelection/ViewsSelection.php
+++ modules/views/src/Plugin/EntityReferenceSelection/ViewsSelection.php
@@ -2,16 +2,20 @@
 
 namespace Drupal\views\Plugin\EntityReferenceSelection;
 
+use Drupal\Component\Utility\Xss;
 use Drupal\Core\DependencyInjection\DeprecatedServicePropertyTrait;
 use Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
+use Drupal\Core\Render\RendererInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Url;
+use Drupal\views\Render\ViewsRenderPipelineMarkup;
 use Drupal\views\Views;
 use Symfony\Component\DependencyInjection\ContainerInterface;
+use Drupal\Core\StringTranslation\StringTranslationTrait;
 
 /**
  * Plugin implementation of the 'selection' entity_reference.
@@ -25,7 +29,7 @@
  */
 class ViewsSelection extends SelectionPluginBase implements ContainerFactoryPluginInterface {
   use DeprecatedServicePropertyTrait;
-
+  use StringTranslationTrait;
   /**
    * {@inheritdoc}
    */
@@ -59,6 +63,13 @@ class ViewsSelection extends SelectionPluginBase implements ContainerFactoryPlug
    */
   protected $currentUser;
 
+  /**
+   * The renderer.
+   *
+   * @var \Drupal\Core\Render\RendererInterface
+   */
+  protected $renderer;
+
   /**
    * Constructs a new ViewsSelection object.
    *
@@ -74,13 +85,21 @@ class ViewsSelection extends SelectionPluginBase implements ContainerFactoryPlug
    *   The module handler service.
    * @param \Drupal\Core\Session\AccountInterface $current_user
    *   The current user.
+   * @param \Drupal\Core\Render\RendererInterface|null $renderer
+   *   The renderer.
    */
-  public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler, AccountInterface $current_user) {
+  public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler, AccountInterface $current_user, RendererInterface $renderer = NULL) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
 
     $this->entityTypeManager = $entity_type_manager;
     $this->moduleHandler = $module_handler;
     $this->currentUser = $current_user;
+
+    if (!$renderer) {
+      @trigger_error('Calling ' . __METHOD__ . ' without the $renderer argument is deprecated in drupal:8.8.0 and is required in drupal:9.0.0. See https://www.drupal.org/node/2791359', E_USER_DEPRECATED);
+      $renderer = \Drupal::service('renderer');
+    }
+    $this->renderer = $renderer;
   }
 
   /**
@@ -93,7 +112,8 @@ public static function create(ContainerInterface $container, array $configuratio
       $plugin_definition,
       $container->get('entity_type.manager'),
       $container->get('module_handler'),
-      $container->get('current_user')
+      $container->get('current_user'),
+      $container->get('renderer')
     );
   }
 
@@ -199,7 +219,7 @@ protected function initializeView($match = NULL, $match_operator = 'CONTAINS', $
     // Check that the view is valid and the display still exists.
     $this->view = Views::getView($view_name);
     if (!$this->view || !$this->view->access($display_name)) {
-      \Drupal::messenger()->addWarning(t('The reference view %view_name cannot be found.', ['%view_name' => $view_name]));
+      \Drupal::messenger()->addWarning($this->t('The reference view %view_name cannot be found.', ['%view_name' => $view_name]));
       return FALSE;
     }
     $this->view->setDisplay($display_name);
@@ -219,22 +239,68 @@ protected function initializeView($match = NULL, $match_operator = 'CONTAINS', $
    * {@inheritdoc}
    */
   public function getReferenceableEntities($match = NULL, $match_operator = 'CONTAINS', $limit = 0) {
+    $entities = [];
+    if ($display_execution_results = $this->getDisplayExecutionResults($match, $match_operator, $limit)) {
+      $entities = $this->stripAdminAndAnchorTagsFromResults($display_execution_results);
+    }
+    return $entities;
+  }
+
+  /**
+   * Fetches the results of executing the display.
+   *
+   * @param string|null $match
+   *   (Optional) Text to match the label against. Defaults to NULL.
+   * @param string $match_operator
+   *   (Optional) The operation the matching should be done with. Defaults
+   *   to "CONTAINS".
+   * @param int $limit
+   *   Limit the query to a given number of items. Defaults to 0, which
+   *   indicates no limiting.
+   * @param array|null $ids
+   *   Array of entity IDs. Defaults to NULL.
+   *
+   * @return array
+   *   The results.
+   */
+  protected function getDisplayExecutionResults(string $match = NULL, string $match_operator = 'CONTAINS', int $limit = 0, array $ids = NULL) {
     $display_name = $this->getConfiguration()['view']['display_name'];
     $arguments = $this->getConfiguration()['view']['arguments'];
-    $result = [];
-    if ($this->initializeView($match, $match_operator, $limit)) {
-      // Get the results.
-      $result = $this->view->executeDisplay($display_name, $arguments);
+    $results = [];
+    if ($this->initializeView($match, $match_operator, $limit, $ids)) {
+      $results = $this->view->executeDisplay($display_name, $arguments);
     }
+    return $results;
+  }
 
-    $return = [];
-    if ($result) {
-      foreach ($this->view->result as $row) {
-        $entity = $row->_entity;
-        $return[$entity->bundle()][$entity->id()] = $entity->label();
-      }
+  /**
+   * Strips all admin and anchor tags from a result list.
+   *
+   * These results are usually displayed in an autocomplete field, which is
+   * surrounded by anchor tags. Most tags are allowed inside anchor tags, except
+   * for other anchor tags.
+   *
+   * @param array $results
+   *   The result list.
+   *
+   * @return array
+   *   The provided result list with anchor tags removed.
+   */
+  protected function stripAdminAndAnchorTagsFromResults(array $results) {
+    $allowed_tags = Xss::getAdminTagList();
+    if (($key = array_search('a', $allowed_tags)) !== FALSE) {
+      unset($allowed_tags[$key]);
+    }
+
+    $stripped_results = [];
+    foreach ($results as $id => $row) {
+      $entity = $row['#row']->_entity;
+      $stripped_results[$entity->bundle()][$id] = ViewsRenderPipelineMarkup::create(
+        Xss::filter($this->renderer->renderPlain($row), $allowed_tags)
+      );
     }
-    return $return;
+
+    return $stripped_results;
   }
 
   /**
@@ -249,12 +315,9 @@ public function countReferenceableEntities($match = NULL, $match_operator = 'CON
    * {@inheritdoc}
    */
   public function validateReferenceableEntities(array $ids) {
-    $display_name = $this->getConfiguration()['view']['display_name'];
-    $arguments = $this->getConfiguration()['view']['arguments'];
+    $entities = $this->getDisplayExecutionResults(NULL, 'CONTAINS', 0, $ids);
     $result = [];
-    if ($this->initializeView(NULL, 'CONTAINS', 0, $ids)) {
-      // Get the results.
-      $entities = $this->view->executeDisplay($display_name, $arguments);
+    if ($entities) {
       $result = array_keys($entities);
     }
     return $result;
@@ -285,7 +348,11 @@ public static function settingsFormValidate($element, FormStateInterface $form_s
       $arguments = array_map('trim', explode(',', $arguments_string));
     }
 
-    $value = ['view_name' => $view, 'display_name' => $display, 'arguments' => $arguments];
+    $value = [
+      'view_name' => $view,
+      'display_name' => $display,
+      'arguments' => $arguments,
+    ];
     $form_state->setValueForElement($element, $value);
   }
 
